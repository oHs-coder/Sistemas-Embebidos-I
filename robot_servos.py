from machine import Pin, PWM
import time

# === Configuración exacta de los servos ===
servo1 = PWM(Pin(8))
servo2 = PWM(Pin(1))
servo3 = PWM(Pin(0))
for s in (servo1, servo2, servo3):
    s.freq(50)

# === Conversión original (intacta) ===
def mover_servo(servo, angulo):
    duty = int((angulo / 180 * 6553) + 1638)
    servo.duty_u16(duty)

# === Variables globales para guardar la posición anterior ===
cur_n1 = 0
cur_n2 = 0
cur_n3 = 0
inited = False

# === Tabla de rangos de Motor2 → (min3, max3) ===
tabla = {
    1: (109, 81), 2: (108, 82), 3: (107, 83), 4: (106, 84), 5: (105, 85),
    6: (104, 86), 7: (103, 87), 8: (102, 88), 9: (101, 89), 10: (100, 90),
    11: (99, 91), 12: (98, 92), 13: (97, 93), 14: (96, 94), 15: (95, 95),
    16: (94, 96), 17: (93, 97), 18: (92, 98), 19: (91, 99), 20: (90, 100),
    21: (89, 101), 22: (88, 102), 23: (87, 103), 24: (86, 104), 25: (85, 105),
    26: (84, 106), 27: (83, 107), 28: (82, 108), 29: (81, 109), 30: (80, 110),
    31: (79, 111), 32: (78, 112), 33: (77, 113), 34: (76, 114), 35: (75, 115),
    36: (74, 116), 37: (73, 117), 38: (72, 118), 39: (71, 119), 40: (70, 120),
    41: (69, 121), 42: (68, 122), 43: (67, 123), 44: (66, 124), 45: (65, 125),
    46: (64, 126), 47: (63, 127), 48: (62, 128), 49: (61, 129), 50: (60, 130),
    51: (59, 131), 52: (58, 132), 53: (57, 133), 54: (56, 134), 55: (55, 135),
    56: (54, 135), 57: (53, 135), 58: (52, 135), 59: (51, 135), 60: (50, 135),
    61: (49, 135), 62: (48, 135), 63: (47, 135), 64: (46, 135), 65: (45, 135),
    66: (44, 135), 67: (43, 135), 68: (42, 135), 69: (41, 135), 70: (40, 135),
    71: (39, 135), 72: (38, 135), 73: (37, 135), 74: (36, 135), 75: (35, 135),
    76: (34, 135), 77: (33, 135), 78: (32, 135), 79: (31, 135), 80: (30, 135),
    81: (29, 135), 82: (28, 135), 83: (27, 135), 84: (26, 135), 85: (25, 135),
    86: (24, 135), 87: (23, 135), 88: (22, 135), 89: (21, 135), 90: (20, 135),
    91: (19, 135), 92: (18, 135), 93: (17, 135), 94: (16, 135), 95: (15, 135),
    96: (14, 135), 97: (13, 135), 98: (12, 135), 99: (11, 135), 100: (10, 135),
    101: (9, 135), 102: (8, 135), 103: (7, 135), 104: (6, 135), 105: (5, 135),
    106: (4, 135), 107: (3, 135), 108: (2, 135), 109: (1, 135), 110: (0, 135),
    111: (0, 135), 112: (0, 135), 113: (0, 135), 114: (0, 135), 115: (0, 135),
    116: (0, 135), 117: (0, 135), 118: (0, 135), 119: (0, 135), 120: (0, 135),
    121: (0, 135), 122: (0, 135), 123: (0, 135), 124: (0, 135), 125: (0, 135),
    126: (0, 135), 127: (0, 135), 128: (0, 135), 129: (0, 135), 130: (0, 135),
    131: (0, 135), 132: (0, 135), 133: (0, 135), 134: (0, 135), 135: (0, 135),
    136: (0, 134), 137: (0, 133), 138: (0, 132), 139: (0, 131), 140: (0, 130),
    141: (0, 129), 142: (0, 128), 143: (0, 127), 144: (0, 126), 145: (0, 125),
    146: (0, 124), 147: (0, 123), 148: (0, 122), 149: (0, 121), 150: (0, 120),
    151: (0, 119), 152: (0, 118), 153: (0, 117), 154: (0, 116), 155: (0, 115),
    156: (0, 114), 157: (0, 113), 158: (0, 112), 159: (0, 111), 160: (0, 110),
    161: (0, 109), 162: (0, 108), 163: (0, 107), 164: (0, 106), 165: (0, 105),
    166: (0, 104), 167: (0, 103), 168: (0, 102), 169: (0, 101), 170: (0, 100),
    171: (0, 99), 172: (0, 98), 173: (0, 97), 174: (0, 96), 175: (0, 95),
    176: (0, 94), 177: (0, 93), 178: (0, 92), 179: (0, 91), 180: (0, 90)
}

# === Función principal ===
def mover_servos(n1, n2, n3, duration=0):
    global cur_n1, cur_n2, cur_n3, inited

    steps = 40

    ang1_t = n1 + 90      # De -90 a 90
    ang2_t = 180 - n2      # De 0 a 180
    ang3_t = n3 + 90       # De -90 a 45

    ang2_int = max(1, min(180, int(round(ang2_t))))
    rango_min, rango_max = tabla[ang2_int]

    if ang3_t < rango_min:
        ang3_t = rango_min
        print(f"⚠️ Servo_3 ajustado a mínimo {rango_min-90}°")
    elif ang3_t > rango_max:
        ang3_t = rango_max
        print(f"⚠️ Servo_3 ajustado a máximo {rango_max-90}°")

    # Primera llamada
    if not inited:
        mover_servo(servo1, ang1_t)
        mover_servo(servo2, ang2_t)
        mover_servo(servo3, ang3_t)
        cur_n1, cur_n2, cur_n3 = ang1_t, ang2_t, ang3_t
        inited = True
        #print(f"✅ Primer movimiento: n1={n1}, n2={n2}, n3={n3}")
        return

    ang1_s, ang2_s, ang3_s = cur_n1, cur_n2, cur_n3

    if duration == 0 or steps <= 1:
        mover_servo(servo1, ang1_t)
        mover_servo(servo2, ang2_t)
        mover_servo(servo3, ang3_t)
    else:
        delta1 = (ang1_t - ang1_s) / steps
        delta2 = (ang2_t - ang2_s) / steps
        delta3 = (ang3_t - ang3_s) / steps
        delay = duration / steps

        for i in range(1, steps + 1):
            a1 = max(0, min(180, ang1_s + delta1 * i))
            a2 = max(0, min(180, ang2_s + delta2 * i))
            a3 = max(0, min(135, ang3_s + delta3 * i))
            mover_servo(servo1, a1)
            mover_servo(servo2, a2)
            mover_servo(servo3, a3)
            time.sleep(delay)

    cur_n1, cur_n2, cur_n3 = ang1_t, ang2_t, ang3_t
    print(f"✅ Movimiento completo → Alpha_1={n1}, Alpha_2={n2}, Alpha_3={n3}")

